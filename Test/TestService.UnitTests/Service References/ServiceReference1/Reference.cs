//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.UnitTests.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void addUser(string userId, string userName, string userPassword, string userMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addUser", ReplyAction="*")]
        System.Threading.Tasks.Task addUserAsync(string userId, string userName, string userPassword, string userMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void updateUser(string userId, string userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateUser", ReplyAction="*")]
        System.Threading.Tasks.Task updateUserAsync(string userId, string userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isUser(string userId, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isUserAsync(string userId, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isAdmin(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isAdminAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUserByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getUserByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUserByName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getUserByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/existUserId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool existUserId(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/existUserId", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> existUserIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/existTaskName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool existTaskName(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/existTaskName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> existTaskNameAsync(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getPassword(string userId, string userMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getPasswordAsync(string userId, string userMail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsersExceptFriends", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] getUsersExceptFriends(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsersExceptFriends", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> getUsersExceptFriendsAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUserNameById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getUserNameById(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUserNameById", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getUserNameByIdAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/friendRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void friendRequest(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/friendRequest", ReplyAction="*")]
        System.Threading.Tasks.Task friendRequestAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/declineFriendRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void declineFriendRequest(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/declineFriendRequest", ReplyAction="*")]
        System.Threading.Tasks.Task declineFriendRequestAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/acceptFriendRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void acceptFriendRequest(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/acceptFriendRequest", ReplyAction="*")]
        System.Threading.Tasks.Task acceptFriendRequestAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFriendRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] getFriendRequests(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFriendRequests", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> getFriendRequestsAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTasks", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTasksByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] getTasksByUser(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTasksByUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> getTasksByUserAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsersByTaskName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] getUsersByTaskName(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getUsersByTaskName", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> getUsersByTaskNameAsync(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void addTask(string userId, string taskRequirements, System.DateTime taskDeadline, string taskPersons, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addTask", ReplyAction="*")]
        System.Threading.Tasks.Task addTaskAsync(string userId, string taskRequirements, System.DateTime taskDeadline, string taskPersons, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void updateTask(int idTask, string persons, string taskRequirements, System.DateTime taskDeadline, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateTask", ReplyAction="*")]
        System.Threading.Tasks.Task updateTaskAsync(int idTask, string persons, string taskRequirements, System.DateTime taskDeadline, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void deleteTask(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteTask", ReplyAction="*")]
        System.Threading.Tasks.Task deleteTaskAsync(string taskName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCodeTaskByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int getCodeTaskByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getCodeTaskByName", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getCodeTaskByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatByCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getChatByCode(int chatCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatByCode", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getChatByCodeAsync(int chatCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatByUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string getChatByUsers(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatByUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> getChatByUsersAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatCodeByUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int getChatCodeByUsers(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getChatCodeByUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<int> getChatCodeByUsersAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void addMessage(int chatCode, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addMessage", ReplyAction="*")]
        System.Threading.Tasks.Task addMessageAsync(int chatCode, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addFriend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void addFriend(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addFriend", ReplyAction="*")]
        System.Threading.Tasks.Task addFriendAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteFriend", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void deleteFriend(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteFriend", ReplyAction="*")]
        System.Threading.Tasks.Task deleteFriendAsync(string userId1, string userId2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFriendsOfUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] getFriendsOfUser(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getFriendsOfUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> getFriendsOfUserAsync(string userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/makeAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void makeAdmin(string idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/makeAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task makeAdminAsync(string idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : TestService.UnitTests.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<TestService.UnitTests.ServiceReference1.WebService1Soap>, TestService.UnitTests.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet getUsers() {
            return base.Channel.getUsers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getUsersAsync() {
            return base.Channel.getUsersAsync();
        }
        
        public void addUser(string userId, string userName, string userPassword, string userMail) {
            base.Channel.addUser(userId, userName, userPassword, userMail);
        }
        
        public System.Threading.Tasks.Task addUserAsync(string userId, string userName, string userPassword, string userMail) {
            return base.Channel.addUserAsync(userId, userName, userPassword, userMail);
        }
        
        public void updateUser(string userId, string userRole) {
            base.Channel.updateUser(userId, userRole);
        }
        
        public System.Threading.Tasks.Task updateUserAsync(string userId, string userRole) {
            return base.Channel.updateUserAsync(userId, userRole);
        }
        
        public bool isUser(string userId, string userPassword) {
            return base.Channel.isUser(userId, userPassword);
        }
        
        public System.Threading.Tasks.Task<bool> isUserAsync(string userId, string userPassword) {
            return base.Channel.isUserAsync(userId, userPassword);
        }
        
        public bool isAdmin(string userId) {
            return base.Channel.isAdmin(userId);
        }
        
        public System.Threading.Tasks.Task<bool> isAdminAsync(string userId) {
            return base.Channel.isAdminAsync(userId);
        }
        
        public string getUserByName(string userName) {
            return base.Channel.getUserByName(userName);
        }
        
        public System.Threading.Tasks.Task<string> getUserByNameAsync(string userName) {
            return base.Channel.getUserByNameAsync(userName);
        }
        
        public bool existUserId(string userId) {
            return base.Channel.existUserId(userId);
        }
        
        public System.Threading.Tasks.Task<bool> existUserIdAsync(string userId) {
            return base.Channel.existUserIdAsync(userId);
        }
        
        public bool existTaskName(string taskName) {
            return base.Channel.existTaskName(taskName);
        }
        
        public System.Threading.Tasks.Task<bool> existTaskNameAsync(string taskName) {
            return base.Channel.existTaskNameAsync(taskName);
        }
        
        public string getPassword(string userId, string userMail) {
            return base.Channel.getPassword(userId, userMail);
        }
        
        public System.Threading.Tasks.Task<string> getPasswordAsync(string userId, string userMail) {
            return base.Channel.getPasswordAsync(userId, userMail);
        }
        
        public string[] getUsersExceptFriends(string userId) {
            return base.Channel.getUsersExceptFriends(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> getUsersExceptFriendsAsync(string userId) {
            return base.Channel.getUsersExceptFriendsAsync(userId);
        }
        
        public string getUserNameById(string userId) {
            return base.Channel.getUserNameById(userId);
        }
        
        public System.Threading.Tasks.Task<string> getUserNameByIdAsync(string userId) {
            return base.Channel.getUserNameByIdAsync(userId);
        }
        
        public void friendRequest(string userId1, string userId2) {
            base.Channel.friendRequest(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task friendRequestAsync(string userId1, string userId2) {
            return base.Channel.friendRequestAsync(userId1, userId2);
        }
        
        public void declineFriendRequest(string userId1, string userId2) {
            base.Channel.declineFriendRequest(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task declineFriendRequestAsync(string userId1, string userId2) {
            return base.Channel.declineFriendRequestAsync(userId1, userId2);
        }
        
        public void acceptFriendRequest(string userId1, string userId2) {
            base.Channel.acceptFriendRequest(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task acceptFriendRequestAsync(string userId1, string userId2) {
            return base.Channel.acceptFriendRequestAsync(userId1, userId2);
        }
        
        public string[] getFriendRequests(string userId) {
            return base.Channel.getFriendRequests(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> getFriendRequestsAsync(string userId) {
            return base.Channel.getFriendRequestsAsync(userId);
        }
        
        public System.Data.DataSet getTasks() {
            return base.Channel.getTasks();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getTasksAsync() {
            return base.Channel.getTasksAsync();
        }
        
        public string[] getTasksByUser(string userId) {
            return base.Channel.getTasksByUser(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> getTasksByUserAsync(string userId) {
            return base.Channel.getTasksByUserAsync(userId);
        }
        
        public string[] getUsersByTaskName(string taskName) {
            return base.Channel.getUsersByTaskName(taskName);
        }
        
        public System.Threading.Tasks.Task<string[]> getUsersByTaskNameAsync(string taskName) {
            return base.Channel.getUsersByTaskNameAsync(taskName);
        }
        
        public void addTask(string userId, string taskRequirements, System.DateTime taskDeadline, string taskPersons, string taskName) {
            base.Channel.addTask(userId, taskRequirements, taskDeadline, taskPersons, taskName);
        }
        
        public System.Threading.Tasks.Task addTaskAsync(string userId, string taskRequirements, System.DateTime taskDeadline, string taskPersons, string taskName) {
            return base.Channel.addTaskAsync(userId, taskRequirements, taskDeadline, taskPersons, taskName);
        }
        
        public void updateTask(int idTask, string persons, string taskRequirements, System.DateTime taskDeadline, string taskName) {
            base.Channel.updateTask(idTask, persons, taskRequirements, taskDeadline, taskName);
        }
        
        public System.Threading.Tasks.Task updateTaskAsync(int idTask, string persons, string taskRequirements, System.DateTime taskDeadline, string taskName) {
            return base.Channel.updateTaskAsync(idTask, persons, taskRequirements, taskDeadline, taskName);
        }
        
        public void deleteTask(string taskName) {
            base.Channel.deleteTask(taskName);
        }
        
        public System.Threading.Tasks.Task deleteTaskAsync(string taskName) {
            return base.Channel.deleteTaskAsync(taskName);
        }
        
        public int getCodeTaskByName(string name) {
            return base.Channel.getCodeTaskByName(name);
        }
        
        public System.Threading.Tasks.Task<int> getCodeTaskByNameAsync(string name) {
            return base.Channel.getCodeTaskByNameAsync(name);
        }
        
        public string getChatByCode(int chatCode) {
            return base.Channel.getChatByCode(chatCode);
        }
        
        public System.Threading.Tasks.Task<string> getChatByCodeAsync(int chatCode) {
            return base.Channel.getChatByCodeAsync(chatCode);
        }
        
        public string getChatByUsers(string userId1, string userId2) {
            return base.Channel.getChatByUsers(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task<string> getChatByUsersAsync(string userId1, string userId2) {
            return base.Channel.getChatByUsersAsync(userId1, userId2);
        }
        
        public int getChatCodeByUsers(string userId1, string userId2) {
            return base.Channel.getChatCodeByUsers(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task<int> getChatCodeByUsersAsync(string userId1, string userId2) {
            return base.Channel.getChatCodeByUsersAsync(userId1, userId2);
        }
        
        public void addMessage(int chatCode, string message) {
            base.Channel.addMessage(chatCode, message);
        }
        
        public System.Threading.Tasks.Task addMessageAsync(int chatCode, string message) {
            return base.Channel.addMessageAsync(chatCode, message);
        }
        
        public void addFriend(string userId1, string userId2) {
            base.Channel.addFriend(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task addFriendAsync(string userId1, string userId2) {
            return base.Channel.addFriendAsync(userId1, userId2);
        }
        
        public void deleteFriend(string userId1, string userId2) {
            base.Channel.deleteFriend(userId1, userId2);
        }
        
        public System.Threading.Tasks.Task deleteFriendAsync(string userId1, string userId2) {
            return base.Channel.deleteFriendAsync(userId1, userId2);
        }
        
        public string[] getFriendsOfUser(string userId) {
            return base.Channel.getFriendsOfUser(userId);
        }
        
        public System.Threading.Tasks.Task<string[]> getFriendsOfUserAsync(string userId) {
            return base.Channel.getFriendsOfUserAsync(userId);
        }
        
        public void makeAdmin(string idUser) {
            base.Channel.makeAdmin(idUser);
        }
        
        public System.Threading.Tasks.Task makeAdminAsync(string idUser) {
            return base.Channel.makeAdminAsync(idUser);
        }
    }
}
